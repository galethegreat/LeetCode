

from collections import deque

class Solution(object):
    #dumb over the top solution
    def moveUpDown(self, adj, string_con, index, total_graph):
        og_string = string_con.copy()
        str_index = "".join(string_con)
        positions = adj[string_con[index]]

        for position in positions:
            og_string[index] = position
            adding = ''.join(og_string)
            total_graph[str_index].add(adding)

    def createTotalGraph(self, adj_list_single_digit):
        total_graph = dict()
        string_int = 0
        string_con = list("0000")
        while string_int < 10000:
            total_graph["".join(string_con)] = set()
            for index in range(4):
                self.moveUpDown(adj_list_single_digit, string_con, index, total_graph)

            string_int = int("".join(string_con))
            string_int += 1
            string_con = list(str(string_int).zfill(4))

        return total_graph

    def numIslopenLock(self, deadends, target):
        if target == "0000": return -1

        adj_list_single_digit = {'0': {'1' ,'9'}, '1':{'0','2'}, '2':{'3','1'}, '3':{'4','2'},'4':{'5','3'},'5':{'6','4'},'6':{'7','5'},'7':{'8','6'},'8':{'9','7'}, '9':{'0','8'}}
        total_graph = self.createTotalGraph(adj_list_single_digit)

        for deadend in deadends:

            total_graph[deadend] = {}

            for combo in total_graph:
                if deadend in total_graph[combo]:
                    total_graph[combo].remove(deadend)


        children = total_graph[target]


        visited = set()
        q = deque()
        distance = 0
        dist = {}
        pred = {}

        for node in total_graph:

            dist[node] = 1000000
            pred[node] = -1

        q.append(target)
        dist[target] = 0

        target = "0000"

        while len(q) > 0:

            parent = q.popleft()
            children = total_graph[parent]

            for child in children:

                if  child in visited: continue

                visited.add(child)
                dist[child] = dist[parent] + 1
                pred[child] = parent
                q.append(child)

                if child == target:
                    return dist[child]

        return -1

deadends =["7888","6788","8777","6686","8768","7667","8666","6686","8768","7677","8686","7667","6878","7876","7687","7678","8786","7777","7767","8688","6768","6876","7676","8868","7686","6676","7776","8776","8687","8767","8677","7668","7777","6677","7668","8676","7866","7768","6778","8878","7777","6866","6686","6678","7678","6866","7876","6866","6678","7777","7788","7878","8887","8788","6667","8877","7888","7777","7766","8677","7766","7778","7768","7778","7788","7877","8666","7878","8788","7677","6776","7686","8786","7878","6667","6886","7866","6868","8668","7888","6788","6767","7868","6876","6867","8668","6876","8767","8887","8888","7777","8767","8878","6886","6667","8768","6668","7868","6677","8887","7788","7867","7767","8766","6886","7887","6667","6668","8876","8778","8687","7868","8678","7766","7668","7867","7777","6686","7876","7688","6666","7677","6887","6888","8786","6876","7686","8776","6768","6676","7786","6876","7788","8868","8766","6666","8768","8667","7678","6868","6886","8678","7667","7667","8777","8686","7778","7788","6667","7768","6788","6777","6687","7888","7776","6888","6676","6776","8776","7678","8678","8868","8766","8866","8778","6878","7766","8788","6778","7676","6777","7866","8666","7778","6668","8678","6688","7878","8676","7877","7778","8687","6876","6686","8766","6877","8887","6878","6766","8868","8767","7887","8667","6686","6768","6866","6867","6766","8666","8668","7867","7877","7886","7667","6786","8868","8677","6778","7676","6787","7886","8686","7678","8676","8877","7887","8788","8767","6667","8688","6787","8868","7777","7677","6866","7886","7867","6886","6686","7676","8788","7877","7867","8766","7666","7666","7777","7667","6666","7787","7886","6777","8666","8768","8777","7866","6868","7667","8786","7668","7887","6678","8888","8676","6678","6777","8688","8687","8887","7666","6666","7768","6877","7887","8677","7678","7888","8777","7778","7776","8777","7776","8876","8878","6867","7867","8666","8877","8688","6766","8787","8788","6877","7677","6766","7688","8878","7777","7687","8868","8777","8768","6786","8666","6767","8677","6666","6888","6686","8677","7776","7767","8787","6868","7678","6666","7676","8868","8778","7887","7888","8878","7767","7787","6876","6766","8678","7668","6686","8886","7878","6666","6676","6867","8878","6777","7687","8876","6686","7688","7878","6767","8887","8877","8677","8687","7886","7788","8877","8888","7666","8868","6666","8768","6878","8878","6667","6687","7687","8868","7768","6676","6667","8667","8878","6778","7686","6877","7777","7887","6686","8676","7867","7676","6877","7767","8788","6876","6677","8688","8767","8876","6666","6667","7778","7787","6768","7876","7887","7888","6766","7768","7788","8778","6678","8676","7878","7666","7677","7666","6687","6686","8877","7687","8876","7887","7788","8777","6778","8778","8877","6876","8877","7668","7787","6678","6676","7667","8887","7767","6767","6877","8878","7768","8686","8778","6788","7788","7776","8786","7877","7886","7776","6868","7886","8786","8886","7666","6778","6888","7677","7687","6877","8676","7677","8876","8686","7666","8667","7866","7867","7788","8776","8868","7778","7687","7887","6768","8668","7666","8768","6876","7687","7777","6686","6777","8686","7668","7688","8777","8788","8778","6688","8678","6777","8888","7667","6786","7888","8868","8677","8666","7766","8878","8677","8677","6766","8677","6788","7866","6687","7868","7868","7878","8777","8887","7667","6787","7766","6688","7678","7866","6886","8667","6676","6676","6676","7777","6777","8778"]

target = "8867"
print(Solution().numIslopenLock(deadends,target))
